{"config":{"output_file":null,"full_docs":false,"pub_only":true,"reachable_only":true,"distro_crate":false,"signatures":false,"borrow_data":false},"version":"0.19.1","compilation":{"directory":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2","program":"/home/leo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/bin/rls","arguments":["--crate-name","binary_search_tree","--edition=2018","/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","--json=diagnostic-rendered-ansi,artifacts,future-incompat","--crate-type","lib","--emit=dep-info,metadata","-C","embed-bitcode=no","-C","debuginfo=2","-C","metadata=63db4f61268b9b26","-C","extra-filename=-63db4f61268b9b26","--out-dir","/home/leo/Documents/uni/courses/ongoing/CPC/repo/CompetitiveProgramming/handson/handson01/sliding_window_maximum/target/rls/debug/deps","-L","dependency=/home/leo/Documents/uni/courses/ongoing/CPC/repo/CompetitiveProgramming/handson/handson01/sliding_window_maximum/target/rls/debug/deps","--cap-lints","allow","--error-format=json","--sysroot","/home/leo/.rustup/toolchains/stable-x86_64-unknown-linux-gnu"],"output":"/home/leo/Documents/uni/courses/ongoing/CPC/repo/CompetitiveProgramming/handson/handson01/sliding_window_maximum/target/rls/debug/deps/libbinary_search_tree-63db4f61268b9b26.rmeta"},"prelude":{"crate_id":{"name":"binary_search_tree","disambiguator":[17602587013284990416,0]},"crate_root":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src","external_crates":[{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":1,"id":{"name":"std","disambiguator":[18009504021925498586,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":2,"id":{"name":"core","disambiguator":[4529231008568630066,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":3,"id":{"name":"compiler_builtins","disambiguator":[6454353934602915994,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":4,"id":{"name":"rustc_std_workspace_core","disambiguator":[4068501274341658802,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":5,"id":{"name":"alloc","disambiguator":[6477578750782050620,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":6,"id":{"name":"libc","disambiguator":[8891903781499800355,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":7,"id":{"name":"unwind","disambiguator":[5820604803307051361,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":8,"id":{"name":"cfg_if","disambiguator":[8495696488133152618,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":9,"id":{"name":"miniz_oxide","disambiguator":[573130743634949162,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":10,"id":{"name":"rustc_std_workspace_alloc","disambiguator":[194626158685852222,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":11,"id":{"name":"adler","disambiguator":[6912020744921273940,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":12,"id":{"name":"hashbrown","disambiguator":[6083063236018227814,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":13,"id":{"name":"std_detect","disambiguator":[4457149757231420433,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":14,"id":{"name":"rustc_demangle","disambiguator":[17193898272045318619,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":15,"id":{"name":"addr2line","disambiguator":[16816495372639671287,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":16,"id":{"name":"gimli","disambiguator":[18018821183479052995,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":17,"id":{"name":"object","disambiguator":[8471467948192562461,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":18,"id":{"name":"memchr","disambiguator":[10516304001967857410,0]}},{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","num":19,"id":{"name":"panic_unwind","disambiguator":[14599081442512269196,0]}}],"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":0,"byte_end":34174,"line_start":1,"line_end":1060,"column_start":1,"column_end":10}},"imports":[],"defs":[{"kind":"Mod","id":{"krate":0,"index":0},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":0,"byte_end":34174,"line_start":1,"line_end":1060,"column_start":1,"column_end":10},"name":"","qualname":"::","value":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","parent":null,"children":[{"krate":0,"index":1},{"krate":0,"index":2},{"krate":0,"index":3},{"krate":0,"index":6},{"krate":0,"index":7},{"krate":0,"index":10},{"krate":0,"index":11},{"krate":0,"index":13},{"krate":0,"index":14},{"krate":0,"index":17},{"krate":0,"index":20},{"krate":0,"index":135},{"krate":0,"index":139},{"krate":0,"index":142},{"krate":0,"index":147},{"krate":0,"index":150},{"krate":0,"index":154},{"krate":0,"index":23},{"krate":0,"index":26},{"krate":0,"index":29},{"krate":0,"index":34},{"krate":0,"index":38},{"krate":0,"index":41},{"krate":0,"index":66},{"krate":0,"index":69},{"krate":0,"index":86},{"krate":0,"index":91},{"krate":0,"index":96},{"krate":0,"index":101},{"krate":0,"index":106},{"krate":0,"index":110},{"krate":0,"index":115},{"krate":0,"index":120},{"krate":0,"index":125},{"krate":0,"index":130}],"decl_id":null,"docs":" This module contains an implementation of a classic binary search tree \n with a large set of methods, including view iterators. \n","sig":null,"attributes":[{"value":"/ This module contains an implementation of a classic binary search tree ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":0,"byte_end":75,"line_start":1,"line_end":1,"column_start":1,"column_end":76}},{"value":"/ with a large set of methods, including view iterators. ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":76,"byte_end":135,"line_start":2,"line_end":2,"column_start":1,"column_end":60}}]},{"kind":"Struct","id":{"krate":0,"index":135},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1706,"byte_end":1722,"line_start":54,"line_end":54,"column_start":12,"column_end":28},"name":"BinarySearchTree","qualname":"::BinarySearchTree","value":"BinarySearchTree { size }","parent":null,"children":[{"krate":0,"index":137},{"krate":0,"index":138}],"decl_id":null,"docs":" In this crate, binary search trees store only one valuable value, which is also \n used as a key, so all elements must have the ```Ord``` trait implementation.\n \n # Examples\n \n ```\n extern crate binary_search_tree;\n \n use binary_search_tree::BinarySearchTree;\n \n // Create a new binary search tree and fill it with numbers from 1 to 5:\n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n for i in vec![3, 1, 2, 5, 4] {\n     tree.insert(i);\n }\n \n // Get them in sorted order\n assert_eq!(tree.sorted_vec(), vec![&1, &2, &3, &4, &5]);\n \n // Let's extract the minimum and maximum.\n assert_eq!(tree.extract_min(), Some(1));\n assert_eq!(tree.extract_max(), Some(5));\n assert_eq!(tree.sorted_vec(), vec![&2, &3, &4]);\n \n // We can also extend the tree with elements from the iterator.\n tree.extend((0..6).map(|x| if x%2 == 0 { x } else { -x }));\n assert_eq!(tree.len(), 9);\n \n // If the elements must be unique, you should use insert_without_dup().\n tree.insert_without_dup(0);\n assert_eq!(tree.len(), 9);\n \n // Delete the value 0 from the tree and make sure that the deletion actually occurred.\n tree.remove(&0);\n assert!(!tree.contains(&0));\n \n // We can clear the tree of any remaining items.\n tree.clear();\n \n // The tree should now be empty.\n assert!(tree.is_empty());\n ``` \n","sig":null,"attributes":[{"value":"/ In this crate, binary search trees store only one valuable value, which is also ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":264,"byte_end":348,"line_start":9,"line_end":9,"column_start":1,"column_end":85}},{"value":"/ used as a key, so all elements must have the ```Ord``` trait implementation.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":349,"byte_end":429,"line_start":10,"line_end":10,"column_start":1,"column_end":81}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":430,"byte_end":434,"line_start":11,"line_end":11,"column_start":1,"column_end":5}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":435,"byte_end":449,"line_start":12,"line_end":12,"column_start":1,"column_end":15}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":450,"byte_end":454,"line_start":13,"line_end":13,"column_start":1,"column_end":5}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":455,"byte_end":462,"line_start":14,"line_end":14,"column_start":1,"column_end":8}},{"value":"/ extern crate binary_search_tree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":463,"byte_end":499,"line_start":15,"line_end":15,"column_start":1,"column_end":37}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":500,"byte_end":504,"line_start":16,"line_end":16,"column_start":1,"column_end":5}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":505,"byte_end":550,"line_start":17,"line_end":17,"column_start":1,"column_end":46}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":551,"byte_end":555,"line_start":18,"line_end":18,"column_start":1,"column_end":5}},{"value":"/ // Create a new binary search tree and fill it with numbers from 1 to 5:","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":556,"byte_end":632,"line_start":19,"line_end":19,"column_start":1,"column_end":77}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":633,"byte_end":699,"line_start":20,"line_end":20,"column_start":1,"column_end":67}},{"value":"/ for i in vec![3, 1, 2, 5, 4] {","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":700,"byte_end":734,"line_start":21,"line_end":21,"column_start":1,"column_end":35}},{"value":"/     tree.insert(i);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":735,"byte_end":758,"line_start":22,"line_end":22,"column_start":1,"column_end":24}},{"value":"/ }","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":759,"byte_end":764,"line_start":23,"line_end":23,"column_start":1,"column_end":6}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":765,"byte_end":769,"line_start":24,"line_end":24,"column_start":1,"column_end":5}},{"value":"/ // Get them in sorted order","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":770,"byte_end":801,"line_start":25,"line_end":25,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(tree.sorted_vec(), vec![&1, &2, &3, &4, &5]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":802,"byte_end":862,"line_start":26,"line_end":26,"column_start":1,"column_end":61}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":863,"byte_end":867,"line_start":27,"line_end":27,"column_start":1,"column_end":5}},{"value":"/ // Let's extract the minimum and maximum.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":868,"byte_end":913,"line_start":28,"line_end":28,"column_start":1,"column_end":46}},{"value":"/ assert_eq!(tree.extract_min(), Some(1));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":914,"byte_end":958,"line_start":29,"line_end":29,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(tree.extract_max(), Some(5));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":959,"byte_end":1003,"line_start":30,"line_end":30,"column_start":1,"column_end":45}},{"value":"/ assert_eq!(tree.sorted_vec(), vec![&2, &3, &4]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1004,"byte_end":1056,"line_start":31,"line_end":31,"column_start":1,"column_end":53}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1057,"byte_end":1061,"line_start":32,"line_end":32,"column_start":1,"column_end":5}},{"value":"/ // We can also extend the tree with elements from the iterator.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1062,"byte_end":1129,"line_start":33,"line_end":33,"column_start":1,"column_end":68}},{"value":"/ tree.extend((0..6).map(|x| if x%2 == 0 { x } else { -x }));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1130,"byte_end":1193,"line_start":34,"line_end":34,"column_start":1,"column_end":64}},{"value":"/ assert_eq!(tree.len(), 9);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1194,"byte_end":1224,"line_start":35,"line_end":35,"column_start":1,"column_end":31}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1225,"byte_end":1229,"line_start":36,"line_end":36,"column_start":1,"column_end":5}},{"value":"/ // If the elements must be unique, you should use insert_without_dup().","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1230,"byte_end":1305,"line_start":37,"line_end":37,"column_start":1,"column_end":76}},{"value":"/ tree.insert_without_dup(0);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1306,"byte_end":1337,"line_start":38,"line_end":38,"column_start":1,"column_end":32}},{"value":"/ assert_eq!(tree.len(), 9);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1338,"byte_end":1368,"line_start":39,"line_end":39,"column_start":1,"column_end":31}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1369,"byte_end":1373,"line_start":40,"line_end":40,"column_start":1,"column_end":5}},{"value":"/ // Delete the value 0 from the tree and make sure that the deletion actually occurred.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1374,"byte_end":1464,"line_start":41,"line_end":41,"column_start":1,"column_end":91}},{"value":"/ tree.remove(&0);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1465,"byte_end":1485,"line_start":42,"line_end":42,"column_start":1,"column_end":21}},{"value":"/ assert!(!tree.contains(&0));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1486,"byte_end":1518,"line_start":43,"line_end":43,"column_start":1,"column_end":33}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1519,"byte_end":1523,"line_start":44,"line_end":44,"column_start":1,"column_end":5}},{"value":"/ // We can clear the tree of any remaining items.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1524,"byte_end":1576,"line_start":45,"line_end":45,"column_start":1,"column_end":53}},{"value":"/ tree.clear();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1577,"byte_end":1594,"line_start":46,"line_end":46,"column_start":1,"column_end":18}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1595,"byte_end":1599,"line_start":47,"line_end":47,"column_start":1,"column_end":5}},{"value":"/ // The tree should now be empty.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1600,"byte_end":1636,"line_start":48,"line_end":48,"column_start":1,"column_end":37}},{"value":"/ assert!(tree.is_empty());","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1637,"byte_end":1666,"line_start":49,"line_end":49,"column_start":1,"column_end":30}},{"value":"/ ``` ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1667,"byte_end":1675,"line_start":50,"line_end":50,"column_start":1,"column_end":9}}]},{"kind":"Field","id":{"krate":0,"index":138},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1760,"byte_end":1764,"line_start":56,"line_end":56,"column_start":9,"column_end":13},"name":"size","qualname":"::BinarySearchTree::size","value":"usize","parent":{"krate":0,"index":135},"children":[],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":25},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1989,"byte_end":1991,"line_start":71,"line_end":71,"column_start":8,"column_end":10},"name":"eq","qualname":"<BinarySearchTree<T> as std::cmp::PartialEq>::eq","value":"fn eq(&Self, &BinarySearchTree<T>) -> bool","parent":{"krate":2,"index":2831},"children":[],"decl_id":{"krate":2,"index":2833},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":28},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2167,"byte_end":2170,"line_start":77,"line_end":77,"column_start":8,"column_end":11},"name":"fmt","qualname":"<BinarySearchTree<T> as std::fmt::Display>::fmt","value":"fn fmt(&Self, &mut fmt::Formatter) -> fmt::Result","parent":{"krate":2,"index":10115},"children":[],"decl_id":{"krate":2,"index":10116},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":31},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2827,"byte_end":2833,"line_start":97,"line_end":97,"column_start":8,"column_end":14},"name":"extend","qualname":"<BinarySearchTree<T> as std::iter::Extend>::extend","value":"fn extend<I>(&mut Self, I) where I: IntoIterator<Item = T>","parent":{"krate":2,"index":8288},"children":[],"decl_id":{"krate":2,"index":8290},"docs":" Extend bst with elements from the iterator.\n \n Note: extend doesn't keep track of duplicates, but just uses the whole iterator.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n use std::iter::Extend;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n tree.extend(vec![7, 1, 0, 4, 5, 3].into_iter());\n assert_eq!(tree.sorted_vec(), [&0, &1, &3, &4, &5, &7]);\n ```\n","sig":null,"attributes":[{"value":"/ Extend bst with elements from the iterator.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2330,"byte_end":2377,"line_start":83,"line_end":83,"column_start":5,"column_end":52}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2382,"byte_end":2386,"line_start":84,"line_end":84,"column_start":5,"column_end":9}},{"value":"/ Note: extend doesn't keep track of duplicates, but just uses the whole iterator.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2391,"byte_end":2475,"line_start":85,"line_end":85,"column_start":5,"column_end":89}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2480,"byte_end":2484,"line_start":86,"line_end":86,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2489,"byte_end":2503,"line_start":87,"line_end":87,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2508,"byte_end":2512,"line_start":88,"line_end":88,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2517,"byte_end":2524,"line_start":89,"line_end":89,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2529,"byte_end":2574,"line_start":90,"line_end":90,"column_start":5,"column_end":50}},{"value":"/ use std::iter::Extend;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2579,"byte_end":2605,"line_start":91,"line_end":91,"column_start":5,"column_end":31}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2610,"byte_end":2614,"line_start":92,"line_end":92,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2619,"byte_end":2685,"line_start":93,"line_end":93,"column_start":5,"column_end":71}},{"value":"/ tree.extend(vec![7, 1, 0, 4, 5, 3].into_iter());","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2690,"byte_end":2742,"line_start":94,"line_end":94,"column_start":5,"column_end":57}},{"value":"/ assert_eq!(tree.sorted_vec(), [&0, &1, &3, &4, &5, &7]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2747,"byte_end":2807,"line_start":95,"line_end":95,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2812,"byte_end":2819,"line_start":96,"line_end":96,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":36},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3591,"byte_end":3600,"line_start":120,"line_end":120,"column_start":8,"column_end":17},"name":"from_iter","qualname":"<BinarySearchTree<T> as std::iter::FromIterator>::from_iter","value":"fn from_iter<I>(I) -> Self where I: IntoIterator<Item = T>","parent":{"krate":2,"index":8275},"children":[],"decl_id":{"krate":2,"index":8277},"docs":" Сreating a bst from an iterator.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n use std::iter::FromIterator;\n \n let tree: BinarySearchTree<i32> = BinarySearchTree::from_iter(\n     vec![7, 1, 0, 4, 5, 3].into_iter());\n assert_eq!(tree.sorted_vec(), [&0, &1, &3, &4, &5, &7]);\n \n let tree: BinarySearchTree<i32> = vec![7, 1, 0, 4, 5, 3].into_iter().collect();\n assert_eq!(tree.sorted_vec(), [&0, &1, &3, &4, &5, &7]);\n ```\n","sig":null,"attributes":[{"value":"/ Сreating a bst from an iterator.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3042,"byte_end":3079,"line_start":105,"line_end":105,"column_start":5,"column_end":41}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3084,"byte_end":3088,"line_start":106,"line_end":106,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3093,"byte_end":3107,"line_start":107,"line_end":107,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3112,"byte_end":3116,"line_start":108,"line_end":108,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3121,"byte_end":3128,"line_start":109,"line_end":109,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3133,"byte_end":3178,"line_start":110,"line_end":110,"column_start":5,"column_end":50}},{"value":"/ use std::iter::FromIterator;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3183,"byte_end":3215,"line_start":111,"line_end":111,"column_start":5,"column_end":37}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3220,"byte_end":3224,"line_start":112,"line_end":112,"column_start":5,"column_end":9}},{"value":"/ let tree: BinarySearchTree<i32> = BinarySearchTree::from_iter(","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3229,"byte_end":3295,"line_start":113,"line_end":113,"column_start":5,"column_end":71}},{"value":"/     vec![7, 1, 0, 4, 5, 3].into_iter());","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3300,"byte_end":3344,"line_start":114,"line_end":114,"column_start":5,"column_end":49}},{"value":"/ assert_eq!(tree.sorted_vec(), [&0, &1, &3, &4, &5, &7]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3349,"byte_end":3409,"line_start":115,"line_end":115,"column_start":5,"column_end":65}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3414,"byte_end":3418,"line_start":116,"line_end":116,"column_start":5,"column_end":9}},{"value":"/ let tree: BinarySearchTree<i32> = vec![7, 1, 0, 4, 5, 3].into_iter().collect();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3423,"byte_end":3506,"line_start":117,"line_end":117,"column_start":5,"column_end":88}},{"value":"/ assert_eq!(tree.sorted_vec(), [&0, &1, &3, &4, &5, &7]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3511,"byte_end":3571,"line_start":118,"line_end":118,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3576,"byte_end":3583,"line_start":119,"line_end":119,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":40},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3802,"byte_end":3807,"line_start":128,"line_end":128,"column_start":8,"column_end":13},"name":"clone","qualname":"<BinarySearchTree<T> as std::clone::Clone>::clone","value":"fn clone(&Self) -> BinarySearchTree<T>","parent":{"krate":2,"index":2801},"children":[],"decl_id":{"krate":2,"index":2802},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":43},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4391,"byte_end":4394,"line_start":153,"line_end":153,"column_start":12,"column_end":15},"name":"new","qualname":"<BinarySearchTree<T>>::new","value":"fn new() -> Self","parent":null,"children":[],"decl_id":null,"docs":" Makes a new empty BST.","sig":null,"attributes":[{"value":"/ Makes a new empty BST.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4063,"byte_end":4089,"line_start":141,"line_end":141,"column_start":5,"column_end":31}},{"value":"/","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4094,"byte_end":4097,"line_start":142,"line_end":142,"column_start":5,"column_end":8}},{"value":"/ Does not allocate anything on its own.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4102,"byte_end":4144,"line_start":143,"line_end":143,"column_start":5,"column_end":47}},{"value":"/","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4149,"byte_end":4152,"line_start":144,"line_end":144,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4157,"byte_end":4171,"line_start":145,"line_end":145,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4176,"byte_end":4180,"line_start":146,"line_end":146,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4185,"byte_end":4192,"line_start":147,"line_end":147,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4197,"byte_end":4242,"line_start":148,"line_end":148,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4247,"byte_end":4251,"line_start":149,"line_end":149,"column_start":5,"column_end":9}},{"value":"/ // New bst that will be contains i32","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4256,"byte_end":4296,"line_start":150,"line_end":150,"column_start":5,"column_end":45}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4301,"byte_end":4367,"line_start":151,"line_end":151,"column_start":5,"column_end":71}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4372,"byte_end":4379,"line_start":152,"line_end":152,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":44},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4817,"byte_end":4825,"line_start":170,"line_end":170,"column_start":12,"column_end":20},"name":"is_empty","qualname":"<BinarySearchTree<T>>::is_empty","value":"fn is_empty(&Self) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Сhecking if the tree is empty.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n assert!(tree.is_empty());\n \n tree.insert(1);\n assert!(!tree.is_empty());\n ```\n","sig":null,"attributes":[{"value":"/ Сhecking if the tree is empty.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4477,"byte_end":4512,"line_start":157,"line_end":157,"column_start":5,"column_end":39}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4517,"byte_end":4521,"line_start":158,"line_end":158,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4526,"byte_end":4540,"line_start":159,"line_end":159,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4545,"byte_end":4549,"line_start":160,"line_end":160,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4554,"byte_end":4561,"line_start":161,"line_end":161,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4566,"byte_end":4611,"line_start":162,"line_end":162,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4616,"byte_end":4620,"line_start":163,"line_end":163,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4625,"byte_end":4691,"line_start":164,"line_end":164,"column_start":5,"column_end":71}},{"value":"/ assert!(tree.is_empty());","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4696,"byte_end":4725,"line_start":165,"line_end":165,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4730,"byte_end":4734,"line_start":166,"line_end":166,"column_start":5,"column_end":9}},{"value":"/ tree.insert(1);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4739,"byte_end":4758,"line_start":167,"line_end":167,"column_start":5,"column_end":24}},{"value":"/ assert!(!tree.is_empty());","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4763,"byte_end":4793,"line_start":168,"line_end":168,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4798,"byte_end":4805,"line_start":169,"line_end":169,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":45},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5222,"byte_end":5225,"line_start":186,"line_end":186,"column_start":12,"column_end":15},"name":"len","qualname":"<BinarySearchTree<T>>::len","value":"fn len(&Self) -> usize","parent":null,"children":[],"decl_id":null,"docs":" Returns the number of elements in the tree.","sig":null,"attributes":[{"value":"/ Returns the number of elements in the tree.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4881,"byte_end":4928,"line_start":174,"line_end":174,"column_start":5,"column_end":52}},{"value":"/","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4933,"byte_end":4936,"line_start":175,"line_end":175,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4941,"byte_end":4955,"line_start":176,"line_end":176,"column_start":5,"column_end":19}},{"value":"/","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4960,"byte_end":4963,"line_start":177,"line_end":177,"column_start":5,"column_end":8}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4968,"byte_end":4975,"line_start":178,"line_end":178,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4980,"byte_end":5025,"line_start":179,"line_end":179,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5030,"byte_end":5033,"line_start":180,"line_end":180,"column_start":5,"column_end":8}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5038,"byte_end":5104,"line_start":181,"line_end":181,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(tree.len(), 0);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5109,"byte_end":5139,"line_start":182,"line_end":182,"column_start":5,"column_end":35}},{"value":"/ tree.insert(1);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5144,"byte_end":5163,"line_start":183,"line_end":183,"column_start":5,"column_end":24}},{"value":"/ assert_eq!(tree.len(), 1);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5168,"byte_end":5198,"line_start":184,"line_end":184,"column_start":5,"column_end":35}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5203,"byte_end":5210,"line_start":185,"line_end":185,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":46},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5606,"byte_end":5611,"line_start":201,"line_end":201,"column_start":12,"column_end":17},"name":"clear","qualname":"<BinarySearchTree<T>>::clear","value":"fn clear(&mut Self)","parent":null,"children":[],"decl_id":null,"docs":" Clears the binary search tree, removing all elements.","sig":null,"attributes":[{"value":"/ Clears the binary search tree, removing all elements.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5277,"byte_end":5334,"line_start":190,"line_end":190,"column_start":5,"column_end":62}},{"value":"/","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5339,"byte_end":5342,"line_start":191,"line_end":191,"column_start":5,"column_end":8}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5347,"byte_end":5361,"line_start":192,"line_end":192,"column_start":5,"column_end":19}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5366,"byte_end":5373,"line_start":193,"line_end":193,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5378,"byte_end":5423,"line_start":194,"line_end":194,"column_start":5,"column_end":50}},{"value":"/","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5428,"byte_end":5431,"line_start":195,"line_end":195,"column_start":5,"column_end":8}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5436,"byte_end":5502,"line_start":196,"line_end":196,"column_start":5,"column_end":71}},{"value":"/ tree.insert(1);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5507,"byte_end":5526,"line_start":197,"line_end":197,"column_start":5,"column_end":24}},{"value":"/ tree.clear();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5531,"byte_end":5548,"line_start":198,"line_end":198,"column_start":5,"column_end":22}},{"value":"/ assert!(tree.is_empty());","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5553,"byte_end":5582,"line_start":199,"line_end":199,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5587,"byte_end":5594,"line_start":200,"line_end":200,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":47},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6150,"byte_end":6154,"line_start":220,"line_end":220,"column_start":12,"column_end":16},"name":"root","qualname":"<BinarySearchTree<T>>::root","value":"fn root(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Viewing the root element of the tree.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n assert!(tree.root().is_none());  // is empty\n \n tree.insert(1); tree.insert(0); tree.insert(2);\n \n // the first element inserted becomes the root\n assert_eq!(tree.root(), Some(&1));\n ```\n","sig":null,"attributes":[{"value":"/ Viewing the root element of the tree.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5681,"byte_end":5722,"line_start":205,"line_end":205,"column_start":5,"column_end":46}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5727,"byte_end":5731,"line_start":206,"line_end":206,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5736,"byte_end":5750,"line_start":207,"line_end":207,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5755,"byte_end":5759,"line_start":208,"line_end":208,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5764,"byte_end":5771,"line_start":209,"line_end":209,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5776,"byte_end":5821,"line_start":210,"line_end":210,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5826,"byte_end":5830,"line_start":211,"line_end":211,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5835,"byte_end":5901,"line_start":212,"line_end":212,"column_start":5,"column_end":71}},{"value":"/ assert!(tree.root().is_none());  // is empty","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5906,"byte_end":5954,"line_start":213,"line_end":213,"column_start":5,"column_end":53}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5959,"byte_end":5963,"line_start":214,"line_end":214,"column_start":5,"column_end":9}},{"value":"/ tree.insert(1); tree.insert(0); tree.insert(2);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":5968,"byte_end":6019,"line_start":215,"line_end":215,"column_start":5,"column_end":56}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6024,"byte_end":6028,"line_start":216,"line_end":216,"column_start":5,"column_end":9}},{"value":"/ // the first element inserted becomes the root","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6033,"byte_end":6083,"line_start":217,"line_end":217,"column_start":5,"column_end":55}},{"value":"/ assert_eq!(tree.root(), Some(&1));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6088,"byte_end":6126,"line_start":218,"line_end":218,"column_start":5,"column_end":43}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6131,"byte_end":6138,"line_start":219,"line_end":219,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":49},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6937,"byte_end":6943,"line_start":245,"line_end":245,"column_start":12,"column_end":18},"name":"insert","qualname":"<BinarySearchTree<T>>::insert","value":"fn insert(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Inserting a new element.","sig":null,"attributes":[{"value":"/ Inserting a new element.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6246,"byte_end":6274,"line_start":224,"line_end":224,"column_start":5,"column_end":33}},{"value":"/","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6279,"byte_end":6282,"line_start":225,"line_end":225,"column_start":5,"column_end":8}},{"value":"/ Returns true if an element with the same value already exists in the tree, false otherwise.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6287,"byte_end":6382,"line_start":226,"line_end":226,"column_start":5,"column_end":100}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6387,"byte_end":6391,"line_start":227,"line_end":227,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6396,"byte_end":6410,"line_start":228,"line_end":228,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6415,"byte_end":6419,"line_start":229,"line_end":229,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6424,"byte_end":6431,"line_start":230,"line_end":230,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6436,"byte_end":6481,"line_start":231,"line_end":231,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6486,"byte_end":6490,"line_start":232,"line_end":232,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6495,"byte_end":6561,"line_start":233,"line_end":233,"column_start":5,"column_end":71}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6566,"byte_end":6570,"line_start":234,"line_end":234,"column_start":5,"column_end":9}},{"value":"/ assert!(!tree.insert(1)); ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6575,"byte_end":6605,"line_start":235,"line_end":235,"column_start":5,"column_end":35}},{"value":"/ assert!(!tree.insert(0)); ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6610,"byte_end":6640,"line_start":236,"line_end":236,"column_start":5,"column_end":35}},{"value":"/ assert!(!tree.insert(2));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6645,"byte_end":6674,"line_start":237,"line_end":237,"column_start":5,"column_end":34}},{"value":"/ assert!(tree.insert(1));  // element 1 is already in the tree","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6679,"byte_end":6744,"line_start":238,"line_end":238,"column_start":5,"column_end":70}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6749,"byte_end":6753,"line_start":239,"line_end":239,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(tree.size, 4);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6758,"byte_end":6787,"line_start":240,"line_end":240,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6792,"byte_end":6796,"line_start":241,"line_end":241,"column_start":5,"column_end":9}},{"value":"/ // Elements in sorted order (inorder traversal)","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6801,"byte_end":6852,"line_start":242,"line_end":242,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(tree.sorted_vec(), vec![&0, &1, &1, &2]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6857,"byte_end":6913,"line_start":243,"line_end":243,"column_start":5,"column_end":61}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":6918,"byte_end":6925,"line_start":244,"line_end":244,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":50},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7892,"byte_end":7910,"line_start":272,"line_end":272,"column_start":12,"column_end":30},"name":"insert_without_dup","qualname":"<BinarySearchTree<T>>::insert_without_dup","value":"fn insert_without_dup(&mut Self, T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Inserting a new unique element.\n \n If an element with the same value is already in the tree, the insertion will not happen.\n Returns true if an element with the same value already exists in the tree, false otherwise.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n \n assert!(!tree.insert_without_dup(1)); \n assert!(!tree.insert_without_dup(0)); \n assert!(!tree.insert_without_dup(2));\n assert!(tree.insert_without_dup(1));  // element 1 is already in the tree\n \n assert_eq!(tree.size, 3);\n \n // Elements in sorted order (inorder traversal)\n assert_eq!(tree.sorted_vec(), vec![&0, &1, &2]);\n ```\n","sig":null,"attributes":[{"value":"/ Inserting a new unique element.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7052,"byte_end":7087,"line_start":250,"line_end":250,"column_start":5,"column_end":40}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7092,"byte_end":7096,"line_start":251,"line_end":251,"column_start":5,"column_end":9}},{"value":"/ If an element with the same value is already in the tree, the insertion will not happen.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7101,"byte_end":7193,"line_start":252,"line_end":252,"column_start":5,"column_end":97}},{"value":"/ Returns true if an element with the same value already exists in the tree, false otherwise.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7198,"byte_end":7293,"line_start":253,"line_end":253,"column_start":5,"column_end":100}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7298,"byte_end":7302,"line_start":254,"line_end":254,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7307,"byte_end":7321,"line_start":255,"line_end":255,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7326,"byte_end":7330,"line_start":256,"line_end":256,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7335,"byte_end":7342,"line_start":257,"line_end":257,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7347,"byte_end":7392,"line_start":258,"line_end":258,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7397,"byte_end":7401,"line_start":259,"line_end":259,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7406,"byte_end":7472,"line_start":260,"line_end":260,"column_start":5,"column_end":71}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7477,"byte_end":7481,"line_start":261,"line_end":261,"column_start":5,"column_end":9}},{"value":"/ assert!(!tree.insert_without_dup(1)); ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7486,"byte_end":7528,"line_start":262,"line_end":262,"column_start":5,"column_end":47}},{"value":"/ assert!(!tree.insert_without_dup(0)); ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7533,"byte_end":7575,"line_start":263,"line_end":263,"column_start":5,"column_end":47}},{"value":"/ assert!(!tree.insert_without_dup(2));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7580,"byte_end":7621,"line_start":264,"line_end":264,"column_start":5,"column_end":46}},{"value":"/ assert!(tree.insert_without_dup(1));  // element 1 is already in the tree","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7626,"byte_end":7703,"line_start":265,"line_end":265,"column_start":5,"column_end":82}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7708,"byte_end":7712,"line_start":266,"line_end":266,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(tree.size, 3);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7717,"byte_end":7746,"line_start":267,"line_end":267,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7751,"byte_end":7755,"line_start":268,"line_end":268,"column_start":5,"column_end":9}},{"value":"/ // Elements in sorted order (inorder traversal)","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7760,"byte_end":7811,"line_start":269,"line_end":269,"column_start":5,"column_end":56}},{"value":"/ assert_eq!(tree.sorted_vec(), vec![&0, &1, &2]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7816,"byte_end":7868,"line_start":270,"line_end":270,"column_start":5,"column_end":57}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":7873,"byte_end":7880,"line_start":271,"line_end":271,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":51},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8662,"byte_end":8670,"line_start":297,"line_end":297,"column_start":12,"column_end":20},"name":"contains","qualname":"<BinarySearchTree<T>>::contains","value":"fn contains(&Self, &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Checks whether the tree contains an element with the specified value.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n assert_eq!(tree.contains(&1), false);\n \n tree.insert(1); tree.insert(0); tree.insert(2); tree.insert(1);\n \n // The contains() method accepts a reference to a value\n assert!(tree.contains(&2));\n assert!(tree.contains(&1));\n assert!(!tree.contains(&999));\n ```\n","sig":null,"attributes":[{"value":"/ Checks whether the tree contains an element with the specified value.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8075,"byte_end":8148,"line_start":280,"line_end":280,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8153,"byte_end":8157,"line_start":281,"line_end":281,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8162,"byte_end":8176,"line_start":282,"line_end":282,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8181,"byte_end":8185,"line_start":283,"line_end":283,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8190,"byte_end":8197,"line_start":284,"line_end":284,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8202,"byte_end":8247,"line_start":285,"line_end":285,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8252,"byte_end":8256,"line_start":286,"line_end":286,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8261,"byte_end":8327,"line_start":287,"line_end":287,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(tree.contains(&1), false);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8332,"byte_end":8373,"line_start":288,"line_end":288,"column_start":5,"column_end":46}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8378,"byte_end":8382,"line_start":289,"line_end":289,"column_start":5,"column_end":9}},{"value":"/ tree.insert(1); tree.insert(0); tree.insert(2); tree.insert(1);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8387,"byte_end":8454,"line_start":290,"line_end":290,"column_start":5,"column_end":72}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8459,"byte_end":8463,"line_start":291,"line_end":291,"column_start":5,"column_end":9}},{"value":"/ // The contains() method accepts a reference to a value","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8468,"byte_end":8527,"line_start":292,"line_end":292,"column_start":5,"column_end":64}},{"value":"/ assert!(tree.contains(&2));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8532,"byte_end":8563,"line_start":293,"line_end":293,"column_start":5,"column_end":36}},{"value":"/ assert!(tree.contains(&1));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8568,"byte_end":8599,"line_start":294,"line_end":294,"column_start":5,"column_end":36}},{"value":"/ assert!(!tree.contains(&999));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8604,"byte_end":8638,"line_start":295,"line_end":295,"column_start":5,"column_end":39}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8643,"byte_end":8650,"line_start":296,"line_end":296,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":52},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9199,"byte_end":9202,"line_start":315,"line_end":315,"column_start":12,"column_end":15},"name":"min","qualname":"<BinarySearchTree<T>>::min","value":"fn min(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" The minimum element of the tree.\n \n Returns a reference to the minimum element.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n assert_eq!(tree.min(), None);\n \n tree.insert(1); tree.insert(0); tree.insert(2); tree.insert(1);\n assert_eq!(tree.min(), Some(&0));\n","sig":null,"attributes":[{"value":"/ The minimum element of the tree.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8750,"byte_end":8786,"line_start":301,"line_end":301,"column_start":5,"column_end":41}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8791,"byte_end":8795,"line_start":302,"line_end":302,"column_start":5,"column_end":9}},{"value":"/ Returns a reference to the minimum element.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8800,"byte_end":8847,"line_start":303,"line_end":303,"column_start":5,"column_end":52}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8852,"byte_end":8856,"line_start":304,"line_end":304,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8861,"byte_end":8875,"line_start":305,"line_end":305,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8880,"byte_end":8884,"line_start":306,"line_end":306,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8889,"byte_end":8896,"line_start":307,"line_end":307,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8901,"byte_end":8946,"line_start":308,"line_end":308,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8951,"byte_end":8955,"line_start":309,"line_end":309,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":8960,"byte_end":9026,"line_start":310,"line_end":310,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(tree.min(), None);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9031,"byte_end":9064,"line_start":311,"line_end":311,"column_start":5,"column_end":38}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9069,"byte_end":9073,"line_start":312,"line_end":312,"column_start":5,"column_end":9}},{"value":"/ tree.insert(1); tree.insert(0); tree.insert(2); tree.insert(1);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9078,"byte_end":9145,"line_start":313,"line_end":313,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(tree.min(), Some(&0));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9150,"byte_end":9187,"line_start":314,"line_end":314,"column_start":5,"column_end":42}}]},{"kind":"Method","id":{"krate":0,"index":53},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9726,"byte_end":9729,"line_start":334,"line_end":334,"column_start":12,"column_end":15},"name":"max","qualname":"<BinarySearchTree<T>>::max","value":"fn max(&Self) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" The maximum element of the tree.\n \n Returns a reference to the maximum element.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n assert_eq!(tree.max(), None);\n \n tree.insert(1); tree.insert(0); tree.insert(2); tree.insert(1);\n assert_eq!(tree.max(), Some(&2));\n ```\n","sig":null,"attributes":[{"value":"/ The maximum element of the tree.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9265,"byte_end":9301,"line_start":319,"line_end":319,"column_start":5,"column_end":41}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9306,"byte_end":9310,"line_start":320,"line_end":320,"column_start":5,"column_end":9}},{"value":"/ Returns a reference to the maximum element.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9315,"byte_end":9362,"line_start":321,"line_end":321,"column_start":5,"column_end":52}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9367,"byte_end":9371,"line_start":322,"line_end":322,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9376,"byte_end":9390,"line_start":323,"line_end":323,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9395,"byte_end":9399,"line_start":324,"line_end":324,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9404,"byte_end":9411,"line_start":325,"line_end":325,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9416,"byte_end":9461,"line_start":326,"line_end":326,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9466,"byte_end":9470,"line_start":327,"line_end":327,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9475,"byte_end":9541,"line_start":328,"line_end":328,"column_start":5,"column_end":71}},{"value":"/ assert_eq!(tree.max(), None);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9546,"byte_end":9579,"line_start":329,"line_end":329,"column_start":5,"column_end":38}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9584,"byte_end":9588,"line_start":330,"line_end":330,"column_start":5,"column_end":9}},{"value":"/ tree.insert(1); tree.insert(0); tree.insert(2); tree.insert(1);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9593,"byte_end":9660,"line_start":331,"line_end":331,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(tree.max(), Some(&2));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9665,"byte_end":9702,"line_start":332,"line_end":332,"column_start":5,"column_end":42}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9707,"byte_end":9714,"line_start":333,"line_end":333,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":54},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11151,"byte_end":11160,"line_start":370,"line_end":370,"column_start":12,"column_end":21},"name":"successor","qualname":"<BinarySearchTree<T>>::successor","value":"fn successor(&Self, &T) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Inorder successor of the element with the specified value\n \n In Binary Search Tree, inorder successor of an input node can be defined as \n the node with the smallest value greater than the value of the input node.\n In another way, we can say that the successor of element x is the element \n immediately following it in sorted order.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);\n tree.insert(18); tree.insert(45); tree.insert(35);\n \n // We have a binary tree with the following structure:\n //       25\n //   15      40\n // 10  18  35  45\n \n assert_eq!(tree.sorted_vec(), vec![&10, &15, &18, &25, &35, &40, &45]);\n \n // and successor of 25 will be element 35.\n assert_eq!(tree.successor(&25), Some(&35));\n \n assert_eq!(tree.successor(&40), Some(&45));\n assert!(tree.successor(&45).is_none()); // Element 45 has no successors\n \n // We can also find successors for missing values in the tree\n assert_eq!(tree.successor(&20), Some(&25)); // [..., &18, vv &20 vv, &25, ...]\n ```\n","sig":null,"attributes":[{"value":"/ Inorder successor of the element with the specified value","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9792,"byte_end":9853,"line_start":338,"line_end":338,"column_start":5,"column_end":66}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9858,"byte_end":9862,"line_start":339,"line_end":339,"column_start":5,"column_end":9}},{"value":"/ In Binary Search Tree, inorder successor of an input node can be defined as ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9867,"byte_end":9947,"line_start":340,"line_end":340,"column_start":5,"column_end":85}},{"value":"/ the node with the smallest value greater than the value of the input node.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":9952,"byte_end":10030,"line_start":341,"line_end":341,"column_start":5,"column_end":83}},{"value":"/ In another way, we can say that the successor of element x is the element ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10035,"byte_end":10113,"line_start":342,"line_end":342,"column_start":5,"column_end":83}},{"value":"/ immediately following it in sorted order.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10118,"byte_end":10163,"line_start":343,"line_end":343,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10168,"byte_end":10172,"line_start":344,"line_end":344,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10177,"byte_end":10191,"line_start":345,"line_end":345,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10196,"byte_end":10200,"line_start":346,"line_end":346,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10205,"byte_end":10212,"line_start":347,"line_end":347,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10217,"byte_end":10262,"line_start":348,"line_end":348,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10267,"byte_end":10271,"line_start":349,"line_end":349,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10276,"byte_end":10342,"line_start":350,"line_end":350,"column_start":5,"column_end":71}},{"value":"/ tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10347,"byte_end":10418,"line_start":351,"line_end":351,"column_start":5,"column_end":76}},{"value":"/ tree.insert(18); tree.insert(45); tree.insert(35);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10423,"byte_end":10477,"line_start":352,"line_end":352,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10482,"byte_end":10486,"line_start":353,"line_end":353,"column_start":5,"column_end":9}},{"value":"/ // We have a binary tree with the following structure:","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10491,"byte_end":10549,"line_start":354,"line_end":354,"column_start":5,"column_end":63}},{"value":"/ //       25","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10554,"byte_end":10569,"line_start":355,"line_end":355,"column_start":5,"column_end":20}},{"value":"/ //   15      40","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10574,"byte_end":10593,"line_start":356,"line_end":356,"column_start":5,"column_end":24}},{"value":"/ // 10  18  35  45","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10598,"byte_end":10619,"line_start":357,"line_end":357,"column_start":5,"column_end":26}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10624,"byte_end":10628,"line_start":358,"line_end":358,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(tree.sorted_vec(), vec![&10, &15, &18, &25, &35, &40, &45]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10633,"byte_end":10708,"line_start":359,"line_end":359,"column_start":5,"column_end":80}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10713,"byte_end":10717,"line_start":360,"line_end":360,"column_start":5,"column_end":9}},{"value":"/ // and successor of 25 will be element 35.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10722,"byte_end":10768,"line_start":361,"line_end":361,"column_start":5,"column_end":51}},{"value":"/ assert_eq!(tree.successor(&25), Some(&35));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10773,"byte_end":10820,"line_start":362,"line_end":362,"column_start":5,"column_end":52}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10825,"byte_end":10829,"line_start":363,"line_end":363,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(tree.successor(&40), Some(&45));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10834,"byte_end":10881,"line_start":364,"line_end":364,"column_start":5,"column_end":52}},{"value":"/ assert!(tree.successor(&45).is_none()); // Element 45 has no successors","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10886,"byte_end":10961,"line_start":365,"line_end":365,"column_start":5,"column_end":80}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10966,"byte_end":10970,"line_start":366,"line_end":366,"column_start":5,"column_end":9}},{"value":"/ // We can also find successors for missing values in the tree","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":10975,"byte_end":11040,"line_start":367,"line_end":367,"column_start":5,"column_end":70}},{"value":"/ assert_eq!(tree.successor(&20), Some(&25)); // [..., &18, vv &20 vv, &25, ...]","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11045,"byte_end":11127,"line_start":368,"line_end":368,"column_start":5,"column_end":87}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11132,"byte_end":11139,"line_start":369,"line_end":369,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":55},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12620,"byte_end":12631,"line_start":406,"line_end":406,"column_start":12,"column_end":23},"name":"predecessor","qualname":"<BinarySearchTree<T>>::predecessor","value":"fn predecessor(&Self, &T) -> Option<&T>","parent":null,"children":[],"decl_id":null,"docs":" Inorder predecessor of the element with the specified value\n \n In Binary Search Tree, inorder predecessor of an input node can be defined as \n the node with the greatest value smaller than the value of the input node.\n In another way, we can say that the predecessor of element x is the element \n immediately preceding it in sorted order.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);\n tree.insert(18); tree.insert(45); tree.insert(35);\n \n // We have a binary tree with the following structure:\n //       25\n //   15      40\n // 10  18  35  45\n \n assert_eq!(tree.sorted_vec(), vec![&10, &15, &18, &25, &35, &40, &45]);\n \n // and predecessor of 25 will be element 35.\n assert_eq!(tree.predecessor(&25), Some(&18));\n \n assert_eq!(tree.predecessor(&40), Some(&35));\n assert!(tree.predecessor(&10).is_none()); // Element 10 has no predecessors\n \n // We can also find predecessors for missing values in the tree\n assert_eq!(tree.predecessor(&20), Some(&18)); // [..., &18, vv &20 vv, &25, ...]\n ```\n","sig":null,"attributes":[{"value":"/ Inorder predecessor of the element with the specified value","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11241,"byte_end":11304,"line_start":374,"line_end":374,"column_start":5,"column_end":68}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11309,"byte_end":11313,"line_start":375,"line_end":375,"column_start":5,"column_end":9}},{"value":"/ In Binary Search Tree, inorder predecessor of an input node can be defined as ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11318,"byte_end":11400,"line_start":376,"line_end":376,"column_start":5,"column_end":87}},{"value":"/ the node with the greatest value smaller than the value of the input node.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11405,"byte_end":11483,"line_start":377,"line_end":377,"column_start":5,"column_end":83}},{"value":"/ In another way, we can say that the predecessor of element x is the element ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11488,"byte_end":11568,"line_start":378,"line_end":378,"column_start":5,"column_end":85}},{"value":"/ immediately preceding it in sorted order.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11573,"byte_end":11618,"line_start":379,"line_end":379,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11623,"byte_end":11627,"line_start":380,"line_end":380,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11632,"byte_end":11646,"line_start":381,"line_end":381,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11651,"byte_end":11655,"line_start":382,"line_end":382,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11660,"byte_end":11667,"line_start":383,"line_end":383,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11672,"byte_end":11717,"line_start":384,"line_end":384,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11722,"byte_end":11726,"line_start":385,"line_end":385,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11731,"byte_end":11797,"line_start":386,"line_end":386,"column_start":5,"column_end":71}},{"value":"/ tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11802,"byte_end":11873,"line_start":387,"line_end":387,"column_start":5,"column_end":76}},{"value":"/ tree.insert(18); tree.insert(45); tree.insert(35);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11878,"byte_end":11932,"line_start":388,"line_end":388,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11937,"byte_end":11941,"line_start":389,"line_end":389,"column_start":5,"column_end":9}},{"value":"/ // We have a binary tree with the following structure:","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":11946,"byte_end":12004,"line_start":390,"line_end":390,"column_start":5,"column_end":63}},{"value":"/ //       25","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12009,"byte_end":12024,"line_start":391,"line_end":391,"column_start":5,"column_end":20}},{"value":"/ //   15      40","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12029,"byte_end":12048,"line_start":392,"line_end":392,"column_start":5,"column_end":24}},{"value":"/ // 10  18  35  45","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12053,"byte_end":12074,"line_start":393,"line_end":393,"column_start":5,"column_end":26}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12079,"byte_end":12083,"line_start":394,"line_end":394,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(tree.sorted_vec(), vec![&10, &15, &18, &25, &35, &40, &45]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12088,"byte_end":12163,"line_start":395,"line_end":395,"column_start":5,"column_end":80}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12168,"byte_end":12172,"line_start":396,"line_end":396,"column_start":5,"column_end":9}},{"value":"/ // and predecessor of 25 will be element 35.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12177,"byte_end":12225,"line_start":397,"line_end":397,"column_start":5,"column_end":53}},{"value":"/ assert_eq!(tree.predecessor(&25), Some(&18));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12230,"byte_end":12279,"line_start":398,"line_end":398,"column_start":5,"column_end":54}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12284,"byte_end":12288,"line_start":399,"line_end":399,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(tree.predecessor(&40), Some(&35));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12293,"byte_end":12342,"line_start":400,"line_end":400,"column_start":5,"column_end":54}},{"value":"/ assert!(tree.predecessor(&10).is_none()); // Element 10 has no predecessors","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12347,"byte_end":12426,"line_start":401,"line_end":401,"column_start":5,"column_end":84}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12431,"byte_end":12435,"line_start":402,"line_end":402,"column_start":5,"column_end":9}},{"value":"/ // We can also find predecessors for missing values in the tree","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12440,"byte_end":12507,"line_start":403,"line_end":403,"column_start":5,"column_end":72}},{"value":"/ assert_eq!(tree.predecessor(&20), Some(&18)); // [..., &18, vv &20 vv, &25, ...]","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12512,"byte_end":12596,"line_start":404,"line_end":404,"column_start":5,"column_end":89}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12601,"byte_end":12608,"line_start":405,"line_end":405,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":56},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13477,"byte_end":13488,"line_start":431,"line_end":431,"column_start":12,"column_end":23},"name":"extract_min","qualname":"<BinarySearchTree<T>>::extract_min","value":"fn extract_min(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the minimum element.\n \n This operation is much more efficient than searching for the \n minimum and then deleting it, since only one pass is performed \n and there are no comparisons between elements at all.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n assert!(tree.extract_min().is_none());\n \n tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);\n \n assert_eq!(tree.extract_min(), Some(10));\n assert_eq!(tree.extract_min(), Some(15));\n \n assert_eq!(tree.sorted_vec(), vec![&25, &40]);\n ```\n","sig":null,"attributes":[{"value":"/ Remove and return the minimum element.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12714,"byte_end":12756,"line_start":410,"line_end":410,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12761,"byte_end":12765,"line_start":411,"line_end":411,"column_start":5,"column_end":9}},{"value":"/ This operation is much more efficient than searching for the ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12770,"byte_end":12835,"line_start":412,"line_end":412,"column_start":5,"column_end":70}},{"value":"/ minimum and then deleting it, since only one pass is performed ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12840,"byte_end":12907,"line_start":413,"line_end":413,"column_start":5,"column_end":72}},{"value":"/ and there are no comparisons between elements at all.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12912,"byte_end":12969,"line_start":414,"line_end":414,"column_start":5,"column_end":62}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12974,"byte_end":12978,"line_start":415,"line_end":415,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":12983,"byte_end":12997,"line_start":416,"line_end":416,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13002,"byte_end":13006,"line_start":417,"line_end":417,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13011,"byte_end":13018,"line_start":418,"line_end":418,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13023,"byte_end":13068,"line_start":419,"line_end":419,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13073,"byte_end":13077,"line_start":420,"line_end":420,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13082,"byte_end":13148,"line_start":421,"line_end":421,"column_start":5,"column_end":71}},{"value":"/ assert!(tree.extract_min().is_none());","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13153,"byte_end":13195,"line_start":422,"line_end":422,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13200,"byte_end":13204,"line_start":423,"line_end":423,"column_start":5,"column_end":9}},{"value":"/ tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13209,"byte_end":13280,"line_start":424,"line_end":424,"column_start":5,"column_end":76}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13285,"byte_end":13289,"line_start":425,"line_end":425,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(tree.extract_min(), Some(10));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13294,"byte_end":13339,"line_start":426,"line_end":426,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(tree.extract_min(), Some(15));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13344,"byte_end":13389,"line_start":427,"line_end":427,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13394,"byte_end":13398,"line_start":428,"line_end":428,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(tree.sorted_vec(), vec![&25, &40]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13403,"byte_end":13453,"line_start":429,"line_end":429,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13458,"byte_end":13465,"line_start":430,"line_end":430,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":57},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14413,"byte_end":14424,"line_start":460,"line_end":460,"column_start":12,"column_end":23},"name":"extract_max","qualname":"<BinarySearchTree<T>>::extract_max","value":"fn extract_max(&mut Self) -> Option<T>","parent":null,"children":[],"decl_id":null,"docs":" Remove and return the maximum element.\n \n This operation is much more efficient than searching for the \n maximum and then deleting it, since only one pass is performed \n and there are no comparisons between elements at all.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n assert!(tree.extract_max().is_none());\n \n tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);\n \n assert_eq!(tree.extract_max(), Some(40));\n assert_eq!(tree.extract_max(), Some(25));\n \n assert_eq!(tree.sorted_vec(), vec![&10, &15]);\n ```\n","sig":null,"attributes":[{"value":"/ Remove and return the maximum element.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13650,"byte_end":13692,"line_start":439,"line_end":439,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13697,"byte_end":13701,"line_start":440,"line_end":440,"column_start":5,"column_end":9}},{"value":"/ This operation is much more efficient than searching for the ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13706,"byte_end":13771,"line_start":441,"line_end":441,"column_start":5,"column_end":70}},{"value":"/ maximum and then deleting it, since only one pass is performed ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13776,"byte_end":13843,"line_start":442,"line_end":442,"column_start":5,"column_end":72}},{"value":"/ and there are no comparisons between elements at all.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13848,"byte_end":13905,"line_start":443,"line_end":443,"column_start":5,"column_end":62}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13910,"byte_end":13914,"line_start":444,"line_end":444,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13919,"byte_end":13933,"line_start":445,"line_end":445,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13938,"byte_end":13942,"line_start":446,"line_end":446,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13947,"byte_end":13954,"line_start":447,"line_end":447,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":13959,"byte_end":14004,"line_start":448,"line_end":448,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14009,"byte_end":14013,"line_start":449,"line_end":449,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14018,"byte_end":14084,"line_start":450,"line_end":450,"column_start":5,"column_end":71}},{"value":"/ assert!(tree.extract_max().is_none());","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14089,"byte_end":14131,"line_start":451,"line_end":451,"column_start":5,"column_end":47}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14136,"byte_end":14140,"line_start":452,"line_end":452,"column_start":5,"column_end":9}},{"value":"/ tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14145,"byte_end":14216,"line_start":453,"line_end":453,"column_start":5,"column_end":76}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14221,"byte_end":14225,"line_start":454,"line_end":454,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(tree.extract_max(), Some(40));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14230,"byte_end":14275,"line_start":455,"line_end":455,"column_start":5,"column_end":50}},{"value":"/ assert_eq!(tree.extract_max(), Some(25));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14280,"byte_end":14325,"line_start":456,"line_end":456,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14330,"byte_end":14334,"line_start":457,"line_end":457,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(tree.sorted_vec(), vec![&10, &15]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14339,"byte_end":14389,"line_start":458,"line_end":458,"column_start":5,"column_end":55}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14394,"byte_end":14401,"line_start":459,"line_end":459,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":58},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15653,"byte_end":15659,"line_start":494,"line_end":494,"column_start":12,"column_end":18},"name":"remove","qualname":"<BinarySearchTree<T>>::remove","value":"fn remove(&mut Self, &T) -> bool","parent":null,"children":[],"decl_id":null,"docs":" Remove the first occurrence of an element with the target value.\n \n Returns true if deletion occurred and false if target is missing from the tree.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);\n tree.insert(18); tree.insert(45); tree.insert(35); tree.insert(18);\n \n assert!(tree.remove(&18));\n assert_eq!(tree.sorted_vec(), vec![&10, &15, &18, &25, &35, &40, &45]);\n assert_eq!(tree.size, 7);\n \n tree.remove(&25);\n assert_eq!(tree.sorted_vec(), vec![&10, &15, &18, &35, &40, &45]);\n assert_eq!(tree.size, 6);\n \n // If you try to delete a value that is missing from the tree, nothing will change\n assert!(!tree.remove(&99));\n assert_eq!(tree.sorted_vec(), vec![&10, &15, &18, &35, &40, &45]);\n assert_eq!(tree.size, 6);\n ```\n","sig":null,"attributes":[{"value":"/ Remove the first occurrence of an element with the target value.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14586,"byte_end":14654,"line_start":468,"line_end":468,"column_start":5,"column_end":73}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14659,"byte_end":14663,"line_start":469,"line_end":469,"column_start":5,"column_end":9}},{"value":"/ Returns true if deletion occurred and false if target is missing from the tree.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14668,"byte_end":14751,"line_start":470,"line_end":470,"column_start":5,"column_end":88}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14756,"byte_end":14760,"line_start":471,"line_end":471,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14765,"byte_end":14779,"line_start":472,"line_end":472,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14784,"byte_end":14788,"line_start":473,"line_end":473,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14793,"byte_end":14800,"line_start":474,"line_end":474,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14805,"byte_end":14850,"line_start":475,"line_end":475,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14855,"byte_end":14859,"line_start":476,"line_end":476,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14864,"byte_end":14930,"line_start":477,"line_end":477,"column_start":5,"column_end":71}},{"value":"/ tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":14935,"byte_end":15006,"line_start":478,"line_end":478,"column_start":5,"column_end":76}},{"value":"/ tree.insert(18); tree.insert(45); tree.insert(35); tree.insert(18);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15011,"byte_end":15082,"line_start":479,"line_end":479,"column_start":5,"column_end":76}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15087,"byte_end":15091,"line_start":480,"line_end":480,"column_start":5,"column_end":9}},{"value":"/ assert!(tree.remove(&18));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15096,"byte_end":15126,"line_start":481,"line_end":481,"column_start":5,"column_end":35}},{"value":"/ assert_eq!(tree.sorted_vec(), vec![&10, &15, &18, &25, &35, &40, &45]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15131,"byte_end":15206,"line_start":482,"line_end":482,"column_start":5,"column_end":80}},{"value":"/ assert_eq!(tree.size, 7);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15211,"byte_end":15240,"line_start":483,"line_end":483,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15245,"byte_end":15249,"line_start":484,"line_end":484,"column_start":5,"column_end":9}},{"value":"/ tree.remove(&25);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15254,"byte_end":15275,"line_start":485,"line_end":485,"column_start":5,"column_end":26}},{"value":"/ assert_eq!(tree.sorted_vec(), vec![&10, &15, &18, &35, &40, &45]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15280,"byte_end":15350,"line_start":486,"line_end":486,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(tree.size, 6);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15355,"byte_end":15384,"line_start":487,"line_end":487,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15389,"byte_end":15393,"line_start":488,"line_end":488,"column_start":5,"column_end":9}},{"value":"/ // If you try to delete a value that is missing from the tree, nothing will change","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15398,"byte_end":15484,"line_start":489,"line_end":489,"column_start":5,"column_end":91}},{"value":"/ assert!(!tree.remove(&99));","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15489,"byte_end":15520,"line_start":490,"line_end":490,"column_start":5,"column_end":36}},{"value":"/ assert_eq!(tree.sorted_vec(), vec![&10, &15, &18, &35, &40, &45]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15525,"byte_end":15595,"line_start":491,"line_end":491,"column_start":5,"column_end":75}},{"value":"/ assert_eq!(tree.size, 6);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15600,"byte_end":15629,"line_start":492,"line_end":492,"column_start":5,"column_end":34}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15634,"byte_end":15641,"line_start":493,"line_end":493,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":59},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16341,"byte_end":16351,"line_start":515,"line_end":515,"column_start":12,"column_end":22},"name":"sorted_vec","qualname":"<BinarySearchTree<T>>::sorted_vec","value":"fn sorted_vec(&Self) -> Vec<&T>","parent":null,"children":[],"decl_id":null,"docs":" Vector of references to elements in the tree in non-decreasing order.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);\n tree.insert(18); tree.insert(45); tree.insert(35); tree.insert(18);\n \n assert_eq!(tree.sorted_vec(), vec![&10, &15, &18, &18, &25, &35, &40, &45]);\n ```\n","sig":null,"attributes":[{"value":"/ Vector of references to elements in the tree in non-decreasing order.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15819,"byte_end":15892,"line_start":502,"line_end":502,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15897,"byte_end":15901,"line_start":503,"line_end":503,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15906,"byte_end":15920,"line_start":504,"line_end":504,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15925,"byte_end":15929,"line_start":505,"line_end":505,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15934,"byte_end":15941,"line_start":506,"line_end":506,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15946,"byte_end":15991,"line_start":507,"line_end":507,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":15996,"byte_end":16000,"line_start":508,"line_end":508,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16005,"byte_end":16071,"line_start":509,"line_end":509,"column_start":5,"column_end":71}},{"value":"/ tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16076,"byte_end":16147,"line_start":510,"line_end":510,"column_start":5,"column_end":76}},{"value":"/ tree.insert(18); tree.insert(45); tree.insert(35); tree.insert(18);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16152,"byte_end":16223,"line_start":511,"line_end":511,"column_start":5,"column_end":76}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16228,"byte_end":16232,"line_start":512,"line_end":512,"column_start":5,"column_end":9}},{"value":"/ assert_eq!(tree.sorted_vec(), vec![&10, &15, &18, &18, &25, &35, &40, &45]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16237,"byte_end":16317,"line_start":513,"line_end":513,"column_start":5,"column_end":85}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16322,"byte_end":16329,"line_start":514,"line_end":514,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":60},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16886,"byte_end":16901,"line_start":533,"line_end":533,"column_start":12,"column_end":27},"name":"into_sorted_vec","qualname":"<BinarySearchTree<T>>::into_sorted_vec","value":"fn into_sorted_vec(Self) -> Vec<T>","parent":null,"children":[],"decl_id":null,"docs":" Moving the tree to a sorted vector.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let tree: BinarySearchTree<i32> = BinarySearchTree::new();\n \n let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();\n tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);\n \nassert_eq!(tree.into_sorted_vec(), vec![10, 15, 25, 40]);\n ```\n","sig":null,"attributes":[{"value":"/ Moving the tree to a sorted vector.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16418,"byte_end":16457,"line_start":519,"line_end":519,"column_start":5,"column_end":44}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16462,"byte_end":16466,"line_start":520,"line_end":520,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16471,"byte_end":16485,"line_start":521,"line_end":521,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16490,"byte_end":16494,"line_start":522,"line_end":522,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16499,"byte_end":16506,"line_start":523,"line_end":523,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16511,"byte_end":16556,"line_start":524,"line_end":524,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16561,"byte_end":16565,"line_start":525,"line_end":525,"column_start":5,"column_end":9}},{"value":"/ let tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16570,"byte_end":16632,"line_start":526,"line_end":526,"column_start":5,"column_end":67}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16637,"byte_end":16641,"line_start":527,"line_end":527,"column_start":5,"column_end":9}},{"value":"/ let mut tree: BinarySearchTree<i32> = BinarySearchTree::new();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16646,"byte_end":16712,"line_start":528,"line_end":528,"column_start":5,"column_end":71}},{"value":"/ tree.insert(25); tree.insert(15); tree.insert(40); tree.insert(10);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16717,"byte_end":16788,"line_start":529,"line_end":529,"column_start":5,"column_end":76}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16793,"byte_end":16797,"line_start":530,"line_end":530,"column_start":5,"column_end":9}},{"value":"/assert_eq!(tree.into_sorted_vec(), vec![10, 15, 25, 40]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16802,"byte_end":16862,"line_start":531,"line_end":531,"column_start":5,"column_end":65}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16867,"byte_end":16874,"line_start":532,"line_end":532,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":61},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17586,"byte_end":17593,"line_start":553,"line_end":553,"column_start":12,"column_end":19},"name":"inorder","qualname":"<BinarySearchTree<T>>::inorder","value":"fn inorder(&Self) -> InorderTraversal<, T>","parent":null,"children":[],"decl_id":null,"docs":" Inorder traverse iterator of binary search tree.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let tree: BinarySearchTree<i32> = vec![5, 7, 3, 4, 8, 6, 1].into_iter().collect();\n // Now we have a tree that looks like this:\n //                  5\n //               3     7\n //              1 4   6 8\n \n // And we should get the following sequence of its elements: 1, 3, 4, 5, 6, 7, 8\n assert_eq!(tree.inorder().collect::<Vec<&i32>>(), vec![&1, &3, &4, &5, &6, &7, &8]);\n ```\n","sig":null,"attributes":[{"value":"/ Inorder traverse iterator of binary search tree.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":16971,"byte_end":17023,"line_start":537,"line_end":537,"column_start":5,"column_end":57}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17028,"byte_end":17032,"line_start":538,"line_end":538,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17037,"byte_end":17051,"line_start":539,"line_end":539,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17056,"byte_end":17060,"line_start":540,"line_end":540,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17065,"byte_end":17072,"line_start":541,"line_end":541,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17077,"byte_end":17122,"line_start":542,"line_end":542,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17127,"byte_end":17131,"line_start":543,"line_end":543,"column_start":5,"column_end":9}},{"value":"/ let tree: BinarySearchTree<i32> = vec![5, 7, 3, 4, 8, 6, 1].into_iter().collect();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17136,"byte_end":17222,"line_start":544,"line_end":544,"column_start":5,"column_end":91}},{"value":"/ // Now we have a tree that looks like this:","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17227,"byte_end":17274,"line_start":545,"line_end":545,"column_start":5,"column_end":52}},{"value":"/ //                  5","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17279,"byte_end":17304,"line_start":546,"line_end":546,"column_start":5,"column_end":30}},{"value":"/ //               3     7","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17309,"byte_end":17337,"line_start":547,"line_end":547,"column_start":5,"column_end":33}},{"value":"/ //              1 4   6 8","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17342,"byte_end":17371,"line_start":548,"line_end":548,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17376,"byte_end":17380,"line_start":549,"line_end":549,"column_start":5,"column_end":9}},{"value":"/ // And we should get the following sequence of its elements: 1, 3, 4, 5, 6, 7, 8","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17385,"byte_end":17469,"line_start":550,"line_end":550,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(tree.inorder().collect::<Vec<&i32>>(), vec![&1, &3, &4, &5, &6, &7, &8]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17474,"byte_end":17562,"line_start":551,"line_end":551,"column_start":5,"column_end":93}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17567,"byte_end":17574,"line_start":552,"line_end":552,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":62},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18468,"byte_end":18481,"line_start":578,"line_end":578,"column_start":12,"column_end":25},"name":"reverse_order","qualname":"<BinarySearchTree<T>>::reverse_order","value":"fn reverse_order(&Self) -> ReverseOrderTraversal<, T>","parent":null,"children":[],"decl_id":null,"docs":" Reverse order traverse iterator of binary search tree.\n \n This iterator traverses the elements of the tree in descending order.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let tree: BinarySearchTree<i32> = vec![5, 7, 3, 4, 8, 6, 1].into_iter().collect();\n // Now we have a tree that looks like this:\n //                  5\n //               3     7\n //              1 4   6 8\n \n // And we should get the following sequence of its elements: 8, 7, 6, 5, 4, 3, 1\n assert_eq!(tree.reverse_order().collect::<Vec<&i32>>(), vec![&8, &7, &6, &5, &4, &3, &1]);\n ```\n","sig":null,"attributes":[{"value":"/ Reverse order traverse iterator of binary search tree.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17754,"byte_end":17812,"line_start":560,"line_end":560,"column_start":5,"column_end":63}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17817,"byte_end":17821,"line_start":561,"line_end":561,"column_start":5,"column_end":9}},{"value":"/ This iterator traverses the elements of the tree in descending order.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17826,"byte_end":17899,"line_start":562,"line_end":562,"column_start":5,"column_end":78}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17904,"byte_end":17908,"line_start":563,"line_end":563,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17913,"byte_end":17927,"line_start":564,"line_end":564,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17932,"byte_end":17936,"line_start":565,"line_end":565,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17941,"byte_end":17948,"line_start":566,"line_end":566,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":17953,"byte_end":17998,"line_start":567,"line_end":567,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18003,"byte_end":18007,"line_start":568,"line_end":568,"column_start":5,"column_end":9}},{"value":"/ let tree: BinarySearchTree<i32> = vec![5, 7, 3, 4, 8, 6, 1].into_iter().collect();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18012,"byte_end":18098,"line_start":569,"line_end":569,"column_start":5,"column_end":91}},{"value":"/ // Now we have a tree that looks like this:","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18103,"byte_end":18150,"line_start":570,"line_end":570,"column_start":5,"column_end":52}},{"value":"/ //                  5","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18155,"byte_end":18180,"line_start":571,"line_end":571,"column_start":5,"column_end":30}},{"value":"/ //               3     7","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18185,"byte_end":18213,"line_start":572,"line_end":572,"column_start":5,"column_end":33}},{"value":"/ //              1 4   6 8","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18218,"byte_end":18247,"line_start":573,"line_end":573,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18252,"byte_end":18256,"line_start":574,"line_end":574,"column_start":5,"column_end":9}},{"value":"/ // And we should get the following sequence of its elements: 8, 7, 6, 5, 4, 3, 1","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18261,"byte_end":18345,"line_start":575,"line_end":575,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(tree.reverse_order().collect::<Vec<&i32>>(), vec![&8, &7, &6, &5, &4, &3, &1]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18350,"byte_end":18444,"line_start":576,"line_end":576,"column_start":5,"column_end":99}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18449,"byte_end":18456,"line_start":577,"line_end":577,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":63},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19267,"byte_end":19275,"line_start":601,"line_end":601,"column_start":12,"column_end":20},"name":"preorder","qualname":"<BinarySearchTree<T>>::preorder","value":"fn preorder(&Self) -> PreorderTraversal<, T>","parent":null,"children":[],"decl_id":null,"docs":" Preorder traverse iterator of binary search tree.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let tree: BinarySearchTree<i32> = vec![5, 7, 3, 4, 8, 6, 1].into_iter().collect();\n // Now we have a tree that looks like this:\n //                  5\n //               3     7\n //              1 4   6 8\n \n // And we should get the following sequence of its elements: 5, 3, 1, 4, 7, 6, 8\n assert_eq!(tree.preorder().collect::<Vec<&i32>>(), vec![&5, &3, &1, &4, &7, &6, &8]);\n ```\n","sig":null,"attributes":[{"value":"/ Preorder traverse iterator of binary search tree.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18650,"byte_end":18703,"line_start":585,"line_end":585,"column_start":5,"column_end":58}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18708,"byte_end":18712,"line_start":586,"line_end":586,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18717,"byte_end":18731,"line_start":587,"line_end":587,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18736,"byte_end":18740,"line_start":588,"line_end":588,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18745,"byte_end":18752,"line_start":589,"line_end":589,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18757,"byte_end":18802,"line_start":590,"line_end":590,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18807,"byte_end":18811,"line_start":591,"line_end":591,"column_start":5,"column_end":9}},{"value":"/ let tree: BinarySearchTree<i32> = vec![5, 7, 3, 4, 8, 6, 1].into_iter().collect();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18816,"byte_end":18902,"line_start":592,"line_end":592,"column_start":5,"column_end":91}},{"value":"/ // Now we have a tree that looks like this:","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18907,"byte_end":18954,"line_start":593,"line_end":593,"column_start":5,"column_end":52}},{"value":"/ //                  5","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18959,"byte_end":18984,"line_start":594,"line_end":594,"column_start":5,"column_end":30}},{"value":"/ //               3     7","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":18989,"byte_end":19017,"line_start":595,"line_end":595,"column_start":5,"column_end":33}},{"value":"/ //              1 4   6 8","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19022,"byte_end":19051,"line_start":596,"line_end":596,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19056,"byte_end":19060,"line_start":597,"line_end":597,"column_start":5,"column_end":9}},{"value":"/ // And we should get the following sequence of its elements: 5, 3, 1, 4, 7, 6, 8","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19065,"byte_end":19149,"line_start":598,"line_end":598,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(tree.preorder().collect::<Vec<&i32>>(), vec![&5, &3, &1, &4, &7, &6, &8]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19154,"byte_end":19243,"line_start":599,"line_end":599,"column_start":5,"column_end":94}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19248,"byte_end":19255,"line_start":600,"line_end":600,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":64},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20071,"byte_end":20080,"line_start":624,"line_end":624,"column_start":12,"column_end":21},"name":"postorder","qualname":"<BinarySearchTree<T>>::postorder","value":"fn postorder(&Self) -> PostorderTraversal<, T>","parent":null,"children":[],"decl_id":null,"docs":" Postorder traverse iterator of binary search tree.\n \n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let tree: BinarySearchTree<i32> = vec![5, 7, 3, 4, 8, 6, 1].into_iter().collect();\n // Now we have a tree that looks like this:\n //                  5\n //               3     7\n //              1 4   6 8\n \n // And we should get the following sequence of its elements: 1, 4, 3, 6, 8, 7, 5\n assert_eq!(tree.postorder().collect::<Vec<&i32>>(), vec![&1, &4, &3, &6, &8, &7, &5]);\n ```\n","sig":null,"attributes":[{"value":"/ Postorder traverse iterator of binary search tree.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19452,"byte_end":19506,"line_start":608,"line_end":608,"column_start":5,"column_end":59}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19511,"byte_end":19515,"line_start":609,"line_end":609,"column_start":5,"column_end":9}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19520,"byte_end":19534,"line_start":610,"line_end":610,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19539,"byte_end":19543,"line_start":611,"line_end":611,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19548,"byte_end":19555,"line_start":612,"line_end":612,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19560,"byte_end":19605,"line_start":613,"line_end":613,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19610,"byte_end":19614,"line_start":614,"line_end":614,"column_start":5,"column_end":9}},{"value":"/ let tree: BinarySearchTree<i32> = vec![5, 7, 3, 4, 8, 6, 1].into_iter().collect();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19619,"byte_end":19705,"line_start":615,"line_end":615,"column_start":5,"column_end":91}},{"value":"/ // Now we have a tree that looks like this:","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19710,"byte_end":19757,"line_start":616,"line_end":616,"column_start":5,"column_end":52}},{"value":"/ //                  5","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19762,"byte_end":19787,"line_start":617,"line_end":617,"column_start":5,"column_end":30}},{"value":"/ //               3     7","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19792,"byte_end":19820,"line_start":618,"line_end":618,"column_start":5,"column_end":33}},{"value":"/ //              1 4   6 8","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19825,"byte_end":19854,"line_start":619,"line_end":619,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19859,"byte_end":19863,"line_start":620,"line_end":620,"column_start":5,"column_end":9}},{"value":"/ // And we should get the following sequence of its elements: 1, 4, 3, 6, 8, 7, 5","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19868,"byte_end":19952,"line_start":621,"line_end":621,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(tree.postorder().collect::<Vec<&i32>>(), vec![&1, &4, &3, &6, &8, &7, &5]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":19957,"byte_end":20047,"line_start":622,"line_end":622,"column_start":5,"column_end":95}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20052,"byte_end":20059,"line_start":623,"line_end":623,"column_start":5,"column_end":12}}]},{"kind":"Method","id":{"krate":0,"index":65},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20839,"byte_end":20850,"line_start":646,"line_end":646,"column_start":12,"column_end":23},"name":"level_order","qualname":"<BinarySearchTree<T>>::level_order","value":"fn level_order(&Self) -> LevelOrderTraversal<, T>","parent":null,"children":[],"decl_id":null,"docs":" Level order binary tree traversal.\n # Examples\n \n ```\n use binary_search_tree::BinarySearchTree;\n \n let tree: BinarySearchTree<i32> = vec![5, 7, 3, 4, 8, 6, 1].into_iter().collect();\n // Now we have a tree that looks like this:\n //                  5\n //               3     7\n //              1 4   6 8\n \n // And we should get the following sequence of its elements: 5, 3, 7, 1, 4, 6, 8\n assert_eq!(tree.level_order().collect::<Vec<&i32>>(), vec![&5, &3, &7, &1, &4, &6, &8]);\n ```\n","sig":null,"attributes":[{"value":"/ Level order binary tree traversal.","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20243,"byte_end":20281,"line_start":631,"line_end":631,"column_start":5,"column_end":43}},{"value":"/ # Examples","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20286,"byte_end":20300,"line_start":632,"line_end":632,"column_start":5,"column_end":19}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20305,"byte_end":20309,"line_start":633,"line_end":633,"column_start":5,"column_end":9}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20314,"byte_end":20321,"line_start":634,"line_end":634,"column_start":5,"column_end":12}},{"value":"/ use binary_search_tree::BinarySearchTree;","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20326,"byte_end":20371,"line_start":635,"line_end":635,"column_start":5,"column_end":50}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20376,"byte_end":20380,"line_start":636,"line_end":636,"column_start":5,"column_end":9}},{"value":"/ let tree: BinarySearchTree<i32> = vec![5, 7, 3, 4, 8, 6, 1].into_iter().collect();","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20385,"byte_end":20471,"line_start":637,"line_end":637,"column_start":5,"column_end":91}},{"value":"/ // Now we have a tree that looks like this:","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20476,"byte_end":20523,"line_start":638,"line_end":638,"column_start":5,"column_end":52}},{"value":"/ //                  5","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20528,"byte_end":20553,"line_start":639,"line_end":639,"column_start":5,"column_end":30}},{"value":"/ //               3     7","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20558,"byte_end":20586,"line_start":640,"line_end":640,"column_start":5,"column_end":33}},{"value":"/ //              1 4   6 8","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20591,"byte_end":20620,"line_start":641,"line_end":641,"column_start":5,"column_end":34}},{"value":"/ ","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20625,"byte_end":20629,"line_start":642,"line_end":642,"column_start":5,"column_end":9}},{"value":"/ // And we should get the following sequence of its elements: 5, 3, 7, 1, 4, 6, 8","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20634,"byte_end":20718,"line_start":643,"line_end":643,"column_start":5,"column_end":89}},{"value":"/ assert_eq!(tree.level_order().collect::<Vec<&i32>>(), vec![&5, &3, &7, &1, &4, &6, &8]);","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20723,"byte_end":20815,"line_start":644,"line_end":644,"column_start":5,"column_end":97}},{"value":"/ ```","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":20820,"byte_end":20827,"line_start":645,"line_end":645,"column_start":5,"column_end":12}}]},{"kind":"Struct","id":{"krate":0,"index":86},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":29110,"byte_end":29126,"line_start":901,"line_end":901,"column_start":12,"column_end":28},"name":"InorderTraversal","qualname":"::InorderTraversal","value":"InorderTraversal {  }","parent":null,"children":[{"krate":0,"index":89},{"krate":0,"index":90}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":91},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":29241,"byte_end":29262,"line_start":906,"line_end":906,"column_start":12,"column_end":33},"name":"ReverseOrderTraversal","qualname":"::ReverseOrderTraversal","value":"ReverseOrderTraversal {  }","parent":null,"children":[{"krate":0,"index":94},{"krate":0,"index":95}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":96},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":29377,"byte_end":29394,"line_start":911,"line_end":911,"column_start":12,"column_end":29},"name":"PreorderTraversal","qualname":"::PreorderTraversal","value":"PreorderTraversal {  }","parent":null,"children":[{"krate":0,"index":99},{"krate":0,"index":100}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":101},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":29509,"byte_end":29527,"line_start":916,"line_end":916,"column_start":12,"column_end":30},"name":"PostorderTraversal","qualname":"::PostorderTraversal","value":"PostorderTraversal {  }","parent":null,"children":[{"krate":0,"index":104},{"krate":0,"index":105}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Struct","id":{"krate":0,"index":106},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":29642,"byte_end":29661,"line_start":921,"line_end":921,"column_start":12,"column_end":31},"name":"LevelOrderTraversal","qualname":"::LevelOrderTraversal","value":"LevelOrderTraversal {  }","parent":null,"children":[{"krate":0,"index":109}],"decl_id":null,"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":114},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":29820,"byte_end":29824,"line_start":929,"line_end":929,"column_start":8,"column_end":12},"name":"next","qualname":"<InorderTraversal as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<&'a T>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":119},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":30505,"byte_end":30509,"line_start":951,"line_end":951,"column_start":8,"column_end":12},"name":"next","qualname":"<ReverseOrderTraversal as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<&'a T>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":124},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":31186,"byte_end":31190,"line_start":973,"line_end":973,"column_start":8,"column_end":12},"name":"next","qualname":"<PreorderTraversal as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<&'a T>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":129},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":32024,"byte_end":32028,"line_start":999,"line_end":999,"column_start":8,"column_end":12},"name":"next","qualname":"<PostorderTraversal as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<&'a T>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]},{"kind":"Method","id":{"krate":0,"index":134},"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":33721,"byte_end":33725,"line_start":1044,"line_end":1044,"column_start":8,"column_end":12},"name":"next","qualname":"<LevelOrderTraversal as std::iter::Iterator>::next","value":"fn next(&mut Self) -> Option<&'a T>","parent":{"krate":2,"index":8474},"children":[],"decl_id":{"krate":2,"index":8476},"docs":"","sig":null,"attributes":[]}],"impls":[{"id":0,"kind":"Direct","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1960,"byte_end":1976,"line_start":70,"line_end":70,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":25}],"docs":"","sig":null,"attributes":[]},{"id":1,"kind":"Direct","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2138,"byte_end":2154,"line_start":76,"line_end":76,"column_start":44,"column_end":60},"value":"","parent":null,"children":[{"krate":0,"index":28}],"docs":"","sig":null,"attributes":[]},{"id":2,"kind":"Direct","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2304,"byte_end":2320,"line_start":82,"line_end":82,"column_start":28,"column_end":44},"value":"","parent":null,"children":[{"krate":0,"index":31}],"docs":"","sig":null,"attributes":[]},{"id":3,"kind":"Direct","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3016,"byte_end":3032,"line_start":104,"line_end":104,"column_start":34,"column_end":50},"value":"","parent":null,"children":[{"krate":0,"index":36}],"docs":"","sig":null,"attributes":[]},{"id":4,"kind":"Direct","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3773,"byte_end":3789,"line_start":127,"line_end":127,"column_start":32,"column_end":48},"value":"","parent":null,"children":[{"krate":0,"index":40}],"docs":"","sig":null,"attributes":[]},{"id":5,"kind":"Inherent","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4037,"byte_end":4053,"line_start":140,"line_end":140,"column_start":14,"column_end":30},"value":"","parent":null,"children":[{"krate":0,"index":43},{"krate":0,"index":44},{"krate":0,"index":45},{"krate":0,"index":46},{"krate":0,"index":47},{"krate":0,"index":49},{"krate":0,"index":50},{"krate":0,"index":51},{"krate":0,"index":52},{"krate":0,"index":53},{"krate":0,"index":54},{"krate":0,"index":55},{"krate":0,"index":56},{"krate":0,"index":57},{"krate":0,"index":58},{"krate":0,"index":59},{"krate":0,"index":60},{"krate":0,"index":61},{"krate":0,"index":62},{"krate":0,"index":63},{"krate":0,"index":64},{"krate":0,"index":65}],"docs":"","sig":null,"attributes":[]},{"id":6,"kind":"Inherent","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":21091,"byte_end":21095,"line_start":656,"line_end":656,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":68}],"docs":"","sig":null,"attributes":[]},{"id":7,"kind":"Inherent","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":21271,"byte_end":21275,"line_start":667,"line_end":667,"column_start":14,"column_end":18},"value":"","parent":null,"children":[{"krate":0,"index":71},{"krate":0,"index":72},{"krate":0,"index":73},{"krate":0,"index":75},{"krate":0,"index":77},{"krate":0,"index":79},{"krate":0,"index":81},{"krate":0,"index":82},{"krate":0,"index":83},{"krate":0,"index":84},{"krate":0,"index":85}],"docs":"","sig":null,"attributes":[]},{"id":8,"kind":"Direct","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":29759,"byte_end":29775,"line_start":926,"line_end":926,"column_start":36,"column_end":52},"value":"","parent":null,"children":[{"krate":0,"index":113},{"krate":0,"index":114}],"docs":"","sig":null,"attributes":[]},{"id":9,"kind":"Direct","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":30439,"byte_end":30460,"line_start":948,"line_end":948,"column_start":36,"column_end":57},"value":"","parent":null,"children":[{"krate":0,"index":118},{"krate":0,"index":119}],"docs":"","sig":null,"attributes":[]},{"id":10,"kind":"Direct","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":31124,"byte_end":31141,"line_start":970,"line_end":970,"column_start":36,"column_end":53},"value":"","parent":null,"children":[{"krate":0,"index":123},{"krate":0,"index":124}],"docs":"","sig":null,"attributes":[]},{"id":11,"kind":"Direct","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":31961,"byte_end":31979,"line_start":996,"line_end":996,"column_start":36,"column_end":54},"value":"","parent":null,"children":[{"krate":0,"index":128},{"krate":0,"index":129}],"docs":"","sig":null,"attributes":[]},{"id":12,"kind":"Direct","span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":33661,"byte_end":33680,"line_start":1041,"line_end":1041,"column_start":36,"column_end":55},"value":"","parent":null,"children":[{"krate":0,"index":133},{"krate":0,"index":134}],"docs":"","sig":null,"attributes":[]}],"refs":[],"macro_refs":[],"relations":[{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":1960,"byte_end":1976,"line_start":70,"line_end":70,"column_start":28,"column_end":44},"kind":{"Impl":{"id":0}},"from":{"krate":0,"index":135},"to":{"krate":2,"index":2831}},{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2138,"byte_end":2154,"line_start":76,"line_end":76,"column_start":44,"column_end":60},"kind":{"Impl":{"id":1}},"from":{"krate":0,"index":135},"to":{"krate":2,"index":10115}},{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":2304,"byte_end":2320,"line_start":82,"line_end":82,"column_start":28,"column_end":44},"kind":{"Impl":{"id":2}},"from":{"krate":0,"index":135},"to":{"krate":2,"index":8288}},{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3016,"byte_end":3032,"line_start":104,"line_end":104,"column_start":34,"column_end":50},"kind":{"Impl":{"id":3}},"from":{"krate":0,"index":135},"to":{"krate":2,"index":8275}},{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":3773,"byte_end":3789,"line_start":127,"line_end":127,"column_start":32,"column_end":48},"kind":{"Impl":{"id":4}},"from":{"krate":0,"index":135},"to":{"krate":2,"index":2801}},{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":4037,"byte_end":4053,"line_start":140,"line_end":140,"column_start":14,"column_end":30},"kind":{"Impl":{"id":5}},"from":{"krate":0,"index":135},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":21091,"byte_end":21095,"line_start":656,"line_end":656,"column_start":14,"column_end":18},"kind":{"Impl":{"id":6}},"from":{"krate":0,"index":142},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":21271,"byte_end":21275,"line_start":667,"line_end":667,"column_start":14,"column_end":18},"kind":{"Impl":{"id":7}},"from":{"krate":0,"index":150},"to":{"krate":4294967295,"index":4294967295}},{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":29759,"byte_end":29775,"line_start":926,"line_end":926,"column_start":36,"column_end":52},"kind":{"Impl":{"id":8}},"from":{"krate":0,"index":86},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":30439,"byte_end":30460,"line_start":948,"line_end":948,"column_start":36,"column_end":57},"kind":{"Impl":{"id":9}},"from":{"krate":0,"index":91},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":31124,"byte_end":31141,"line_start":970,"line_end":970,"column_start":36,"column_end":53},"kind":{"Impl":{"id":10}},"from":{"krate":0,"index":96},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":31961,"byte_end":31979,"line_start":996,"line_end":996,"column_start":36,"column_end":54},"kind":{"Impl":{"id":11}},"from":{"krate":0,"index":101},"to":{"krate":2,"index":8474}},{"span":{"file_name":"/home/leo/.cargo/registry/src/github.com-1ecc6299db9ec823/binary_search_tree-0.2.2/src/lib.rs","byte_start":33661,"byte_end":33680,"line_start":1041,"line_end":1041,"column_start":36,"column_end":55},"kind":{"Impl":{"id":12}},"from":{"krate":0,"index":106},"to":{"krate":2,"index":8474}}]}